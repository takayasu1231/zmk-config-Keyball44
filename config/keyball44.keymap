#define DEFAULT 0
#define NUM     1
#define SYM     2
#define FUN     3
#define MOUSE   4
#define SCROLL  5
#define SNIPE   6

#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
    quick-tap-ms = <150>;
};

&caps_word { continue-list = <UNDERSCORE MINUS>; };

/ {
    // custom shift using mod-morph 

    behaviors {
        cmqus: comma_question {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_QUESTION";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp QUESTION>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dtsmi: dot_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_SEMI";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp SEMI>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "QWRT";
            bindings = <
&kp TAB           &kp Q     &kp W                      &kp E        &kp R                &kp T                     &kp Y      &kp U    &kp I     &kp O     &kp P      &kp MINUS
&kp LCTRL         &kp A     &kp S                      &kp D        &kp F                &kp G                     &kp H      &lt 5 J  &kp K     &kp L     &kp SEMI   &none
&kp LEFT_COMMAND  &kp Z     &kp X                      &kp C        &kp V                &kp B                     &kp N      &kp M    &mkp MB1  &mkp MB2  &kp SLASH  &kp RG(RIGHT_ARROW)
&none             &kp LALT  &mt LEFT_SHIFT LANGUAGE_2  &lt 3 SPACE  &lt 5 LANG_HIRAGANA             &kp BACKSPACE  &lt 1 RET                                          &kp LG(LEFT_ARROW)
            >;
        };

        number_layer {
            label = "NUM";
            bindings = <
&none   &none   &kp N7        &kp N8        &kp N9        &kp LEFT_PARENTHESIS              &kp RIGHT_PARENTHESIS  &kp EXCLAMATION  &kp QUESTION  &kp AT_SIGN  &kp NUMBER_0  &none
&none   &none   &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp LEFT_BRACKET                  &kp RIGHT_BRACKET      &kp MINUS        &kp PLUS      &kp HASH     &none         &none
&none   &none   &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp LESS_THAN                     &kp GREATER_THAN       &kp UNDERSCORE   &kp EQUAL     &trans       &kp QUESTION  &none
&kp N0  &trans  &trans        &trans        &trans                                  &trans  &trans                                                                           &trans
            >;
        };

        symbol_layer {
            label = "SYM";
            bindings = <
&none   &kp EXCLAMATION  &kp AT_SIGN   &kp HASH      &kp DOLLAR    &kp PERCENT              &kp CARET       &kp AMPERSAND  &kp ASTERISK      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &none
&none   &bt BT_CLR       &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &trans                   &kp MINUS       &kp EQUAL      &kp LEFT_BRACKET  &kp RIGHT_BRACKET     &kp SQT                &none
&none   &trans           &trans        &trans        &trans        &trans                   &kp UNDERSCORE  &kp PLUS       &trans            &trans                &kp NON_US_BACKSLASH   &none
&trans  &trans           &trans        &trans        &trans                         &trans  &trans                                                                                        &trans
            >;
        };

        function_layer {
            label = "FUN";
            bindings = <
&none   &none   &none                   &kp LS(LG(RET))  &none                    &none              &none  &none           &none           &none            &none  &none
&none   &none   &kp LS(LG(LEFT_ARROW))  &none            &kp LS(LG(RIGHT_ARROW))  &none              &none  &none           &kp UP_ARROW    &none            &none  &none
&none   &none   &none                   &none            &none                    &none              &none  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &none  &none
&trans  &trans  &trans                  &trans           &trans                              &trans  &none                                                          &trans
            >;
        };

        mouse_layer {
            label = "MOUSE";
            bindings = <
&none   &kp N1          &kp N2          &kp N3        &kp N4     &kp N5              &kp N6         &kp N7     &kp N8  &kp N9     &kp N0     &none
&none   &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT  &none               &kp PAGE_UP    &mkp LCLK  &none   &mkp RCLK  &mkp MCLK  &none
&none   &none           &none           &none         &none      &none               &kp PAGE_DOWN  &none      &none   &none      &none      &none
&trans  &trans          &trans          &trans        &trans                 &trans  &trans                                                  &none
            >;
        };

        scroll_layer {
            label = "SCROLL";
            bindings = <
&trans  &trans  &kp F7  &kp F8  &kp F9  &trans              &kp LS(LG(NUMBER_2))  &kp LS(LG(O))  &trans  &trans  &trans  &bt BT_SEL 1
&trans  &trans  &kp F4  &kp F5  &kp F6  &trans              &kp LG(PLUS)          &kp LG(MINUS)  &trans  &trans  &trans  &trans
&trans  &trans  &kp F1  &kp F2  &kp F3  &trans              &trans                &trans         &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans              &trans  &trans                                                       &trans
            >;
        };

        snipe_layer {
            label = "SNIPE";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans              &trans  &trans                                  &trans
            >;
        };
    };
};
